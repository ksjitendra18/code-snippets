import { BreadCrumbs } from "@/components/breadcrumps";
import { CodeHighlighter } from "@/components/code-highlighter";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Separator } from "@/components/ui/separator";
import { db } from "@/db";
import { CommentsSection } from "@/features/snippets/components/comment-section";
import { VersionSelector } from "@/features/snippets/components/version-selector";
import {
  ArrowLeft,
  Calendar,
  Copy,
  GitBranch,
  MessageCircle,
  User,
} from "lucide-react";
import Link from "next/link";
import { Suspense } from "react";

type Params = Promise<{ snippetId: string }>;

// Mock version data - replace with actual database query
const mockVersions = [
  {
    id: 1,
    version: "1.0.0",
    title: "React Component with useState Hook",
    code: `import React, { useState } from 'react';

export default function Counter() {
  const [count, setCount] = useState(0);

  return (
    <div>
      <p>You clicked {count} times</p>
      <button onClick={() => setCount(count + 1)}>
        Click me
      </button>
    </div>
  );
}`,
    language: "javascript",
    changeDescription: "Initial version with basic counter functionality",
    createdAt: new Date("2024-01-10T09:00:00"),
    author: "You",
    isCurrent: false,
  },
  {
    id: 2,
    version: "1.1.0",
    title: "Enhanced Counter with Reset",
    code: `import React, { useState } from 'react';

export default function Counter() {
  const [count, setCount] = useState(0);

  const increment = () => setCount(count + 1);
  const decrement = () => setCount(count - 1);
  const reset = () => setCount(0);

  return (
    <div className="counter">
      <h2>Counter: {count}</h2>
      <div className="buttons">
        <button onClick={increment}>+</button>
        <button onClick={decrement}>-</button>
        <button onClick={reset}>Reset</button>
      </div>
    </div>
  );
}`,
    language: "javascript",
    changeDescription:
      "Added decrement and reset functionality with better styling",
    createdAt: new Date("2024-01-12T14:30:00"),
    author: "You",
    isCurrent: false,
  },
  {
    id: 3,
    version: "2.0.0",
    title: "TypeScript Counter with Custom Hook",
    code: `import React, { useState, useCallback } from 'react';

interface CounterProps {
  initialValue?: number;
  step?: number;
}

const useCounter = (initialValue = 0, step = 1) => {
  const [count, setCount] = useState(initialValue);

  const increment = useCallback(() => {
    setCount(prev => prev + step);
  }, [step]);

  const decrement = useCallback(() => {
    setCount(prev => prev - step);
  }, [step]);

  const reset = useCallback(() => {
    setCount(initialValue);
  }, [initialValue]);

  return { count, increment, decrement, reset };
};

export default function Counter({ initialValue = 0, step = 1 }: CounterProps) {
  const { count, increment, decrement, reset } = useCounter(initialValue, step);

  return (
    <div className="p-4 max-w-sm mx-auto bg-white rounded-lg shadow-md">
      <h2 className="text-2xl font-bold text-center mb-4">
        Counter: {count}
      </h2>
      <div className="flex gap-2 justify-center">
        <button 
          onClick={increment}
          className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
        >
          +{step}
        </button>
        <button 
          onClick={decrement}
          className="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600"
        >
          -{step}
        </button>
        <button 
          onClick={reset}
          className="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600"
        >
          Reset
        </button>
      </div>
    </div>
  );
}`,
    language: "typescript",
    changeDescription:
      "Converted to TypeScript, added custom hook, props support, and Tailwind styling",
    createdAt: new Date("2024-01-15T16:45:00"),
    author: "You",
    isCurrent: true,
  },
];

function CopyButton({ code }: { code: string }) {
  return (
    <Button
      variant="outline"
      size="sm"
      className="absolute top-4 right-4 opacity-0 group-hover:opacity-100 transition-opacity duration-200"
    >
      <Copy className="h-4 w-4 mr-1" />
      Copy
    </Button>
  );
}

// Not found component
function NotFound() {
  return (
    <div className="min-h-[60vh] flex flex-col items-center justify-center">
      <div className="text-center max-w-md mx-auto">
        <div className="w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-6">
          <svg
            className="w-12 h-12 text-gray-400"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={1.5}
              d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
            />
          </svg>
        </div>
        <h1 className="text-3xl font-bold text-gray-900 mb-4">
          Snippet Not Found
        </h1>
        <p className="text-gray-600 mb-8 leading-relaxed">
          The code snippet you're looking for doesn't exist or may have been
          removed.
        </p>
        <Button asChild size="lg" className="min-w-[200px]">
          <Link href="/snippets">
            <ArrowLeft className="mr-2 h-4 w-4" />
            Back to Snippets
          </Link>
        </Button>
      </div>
    </div>
  );
}

// Loading component
function SnippetSkeleton() {
  return (
    <div className="animate-pulse">
      <div className="h-8 bg-gray-200 rounded mb-6 max-w-md mx-auto"></div>
      <div className="h-64 bg-gray-200 rounded mb-8"></div>
      <div className="space-y-4">
        {[1, 2, 3].map((i) => (
          <div key={i} className="h-20 bg-gray-100 rounded"></div>
        ))}
      </div>
    </div>
  );
}

export default async function SnippetPage({ params }: { params: Params }) {
  const { snippetId } = await params;

  const snippetData = await db.query.snippets.findFirst({
    where: { id: Number(snippetId) },
  });

  // In a real app, you'd fetch versions from the database
  const versions = mockVersions;

  // Client component for version state management
  function SnippetContent({ snippet }: { snippet: typeof snippetData }) {
    // const [selectedVersion, setSelectedVersion] = useState(
    //   versions.find((v) => v.isCurrent) || versions[0]
    // );
    const selectedVersion = versions.find((v) => v.isCurrent) || versions[0];
    const setSelectedVersion = (version: typeof selectedVersion) => {
      console.log("setSelectedVersion", version);
    };

    return (
      <div className="space-y-8">
        {/* Snippet Header */}
        <div className="bg-white rounded-lg shadow-sm border p-6">
          <div className="flex flex-col sm:flex-row sm:items-center justify-between gap-4 mb-4">
            <div>
              <h1 className="text-3xl font-bold text-gray-900 mb-2">
                {selectedVersion.title}
              </h1>
              <div className="flex items-center gap-2">
                <Badge variant="outline" className="text-sm">
                  <GitBranch className="h-3 w-3 mr-1" />v
                  {selectedVersion.version}
                </Badge>
                <Badge variant="secondary">{selectedVersion.language}</Badge>
              </div>
            </div>
          </div>

          {/* Version Change Description */}
          {selectedVersion.changeDescription && (
            <div className="bg-blue-50 border-l-4 border-blue-500 p-4 mb-4">
              <h3 className="font-medium text-blue-900 mb-1">What's New:</h3>
              <p className="text-blue-800 text-sm">
                {selectedVersion.changeDescription}
              </p>
            </div>
          )}

          <div className="flex items-center gap-4 text-sm text-gray-600">
            <div className="flex items-center gap-1">
              <User className="h-4 w-4" />
              <span>Created by {selectedVersion.author}</span>
            </div>
            <div className="flex items-center gap-1">
              <Calendar className="h-4 w-4" />
              <span>{selectedVersion.createdAt.toLocaleDateString()}</span>
            </div>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          <div className="lg:col-span-2">
            <Card className="relative group">
              <CardHeader className="pb-3">
                <CardTitle className="text-lg font-medium flex items-center justify-between">
                  <span>Code - Version {selectedVersion.version}</span>
                  <CopyButton code={selectedVersion.code} />
                </CardTitle>
              </CardHeader>
              <Separator />
              <CardContent className="p-0">
                <div className="relative">
                  <CodeHighlighter
                    code={selectedVersion.code}
                    language={selectedVersion.language}
                  />
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Version History Sidebar */}
          <div className="lg:col-span-1">
            <VersionSelector
              versions={versions}
              currentVersion={selectedVersion}
            />
          </div>
        </div>

        {/* Comments Section */}
        <div className="bg-white rounded-lg shadow-sm border p-6">
          <Suspense fallback={<div>Loading comments...</div>}>
            <CommentsSection />
          </Suspense>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 py-6">
        {/* Header with Breadcrumbs */}
        <div className="mb-8">
          <BreadCrumbs
            customLabels={{
              "/snippets": "Code Snippets",
              [`/snippets/${snippetId}`]: snippetData?.title || "Snippet",
            }}
            className="mb-4"
          />
        </div>

        {!snippetData ? <NotFound /> : <SnippetContent snippet={snippetData} />}
      </div>
    </div>
  );
}
